create database <database-name>;
drop database <data-basename>;
use <database-name>;
show tables;

Execution flow of MYSQL
Summary of SQL Query Execution Order:-
1.FROM (including joins)
2.WHERE (filtering)
3.GROUP BY (grouping)
4.HAVING (filtering groups)
5.SELECT (columns and expressions)
6.DISTINCT (removing duplicates)
7.ORDER BY (sorting)
8.LIMIT / OFFSET (pagination)

GROUPBY:- 1.Group by statement groups rows that have the same values into summary rows.
          2.Manadatory to use with agregate functions sum(),avg(),min(),max(),distinct().

HAVING:-  1.Having clause is used to apply filter on result of group by based on sepcific condition.
          2.Where clause places condition on selected columns where as having clause places condition on groups created by
           group by clause.

Nested query/nested sub query :-Inner Query runs first and only once .Outer Query is executed with the result from Inner Query.
This follows (Bottom Up Approach). IN , NOT IN ,ANY,ALL key words are  used in this nested Query.
Example :-Select* from table where salary=(select max(salary) from the table)

Correlated subQuery:-Outer Query exists first and  for every outer Query Inner query is executed .This follows 
(Top Down Approach).Exists,NOT Exists  keywords are used in correlated nested query.
Example :-select * from employee exists (select emp_id from project where employee.empid=project.emp_id)

IN/NOT IN :- this  works on group of values /tuple  
EXISTS/NOT EXISTS:-applied on correlated quries.


PATTERN MATCHING(LIKE,NOT LIKE):
1.start with a - <column name> like "a%" or REGEXP '^A'
2.ends with a - <column name> like "%a" or REGEXP 'e$'
3.starts with a and ends with e- <column name> like "a%e"
4.doesnot start with a - <column name> not like "a%" 
5.doest ends with a - <column name> not like "%a" or REGEXP 'e$'
6.starts with a and ends with e- <column name> not like "a%e"



Syntax for CASE ... END AS:
The CASE statement in SQL is used to implement conditional logic. Hereâ€™s the general syntax for using CASE in a SELECT query, 
including the use of END AS to name the resulting column
SELECT 
    column1,
    column2,
    CASE 
        WHEN condition1 THEN result1
        WHEN condition2 THEN result2
        -- additional conditions as needed
        ELSE default_result
    END AS alias_name
FROM table_name;
//from above we can exclude column names also
SELECT: Specifies the columns to retrieve.
column1, column2: Other columns you want to include in the result set.
CASE: Begins the conditional logic block.
WHEN condition THEN result: Defines conditions and the result to return if that condition is met.
ELSE default_result: (Optional) Provides a default result if none of the WHEN conditions are true.
END: Marks the end of the CASE block.
AS alias_name: Assigns a name (alias) to the result of the CASE statement.
This name will be used as the column header in the output.









/
